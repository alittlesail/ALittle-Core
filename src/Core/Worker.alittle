
namespace ALittle;

protected struct WorkerMessage
{
    int id;
    int rpc_id;
    any msg;
    string reason;
}

protected class IWorker
{
    public fun IsStopped() : bool { return false; }
    // 正常终止
    public fun Stop([Nullable] string reason) {}
    
    protected fun HandleMessage(WorkerMessage worker_msg) {}

    // 发送通知包
    public fun SendMsg<T:struct>(T msg)
    {
        var rflt = reflect<T>;

        var info = new WorkerMessage();
        info.id = rflt.hash_code;
        info.msg = msg;
        info.rpc_id = 0;
        this.Send(info);
    }

    // 发送数据
    protected fun Send(WorkerMessage msg) { throw("IWorker Send not impl"); }

    // 发送rpc
    protected fun SendRPC(Thread thread, int msg_id, any msg_body) { }

    // 提供框架调用
    protected static Invoke(int msg_id, IWorker client, any msg_body)
    {
        var info = new WorkerMessage();
        info.id = msg_id;
        info.msg = msg_body;
        info.rpc_id = 0;
        client.Send(info);
    }
    protected await static InvokeRPC(int msg_id, IWorker client, any msg_body) : string, any
    {
        if (co == null) return "当前不是协程", null;
    
        if (client.IsStopped())
            return "已停止", null;
    
        client.SendRPC(co, msg_id, msg_body);
        return yield;
    }
}

private var __all_worker_callback = new Map<int, Functor<(IWorker, any)>>();
protected static RegWorkerCallback(int msg_id, Functor<(IWorker, any)> callback)
{
    if (__all_worker_callback[msg_id] != null)
    {
        Error("RegWorkerCallback消息回调函数注册失败，名字为"..msg_id.."已存在");
        return;
    }
    __all_worker_callback[msg_id] = callback;
}
// 获取回调函数
public static FindWorkerCallback(int msg_id) : Functor<(IWorker, any)>
{
    return __all_worker_callback[msg_id];
}

// 注册回调函数
private var __all_worker_rpc_callback = new Map<int, Functor<await(IWorker, any): any>>();
private var __all_worker_rpc_return_id = new Map<int, int>();
protected static RegWorkerRpcCallback(int msg_id, Functor<await(IWorker, any) : any> callback, int return_id)
{
    if (__all_worker_rpc_callback[msg_id] != null)
    {
        var name = "unknow";
        var rflct = FindStructById(msg_id);
        if (rflct != null) name = rflct.name;
        Error("RegWorkerRpcCallback消息回调函数注册失败，名字为 msg_id:"..msg_id.." msg_name:"..name.."已存在");
        return;
    }
    __all_worker_rpc_callback[msg_id] = callback;
    __all_worker_rpc_return_id[msg_id] = return_id;
}
// 获取回调函数
public static FindWorkerRpcCallback(int msg_id) : Functor<await(IWorker, any) : any>, int
{
    return __all_worker_rpc_callback[msg_id], __all_worker_rpc_return_id[msg_id];
}
